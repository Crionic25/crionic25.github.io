/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.amnproject;

import static com.mycompany.amnproject.MainClass.con;
import static java.awt.Frame.NORMAL;
import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import static com.mycompany.amnproject.image.getImage;
/**
 *
 * @author Crionic
 */
public class nyilvan extends javax.swing.JFrame {
    private static final DecimalFormat df2 = new DecimalFormat("#,###.##");

    /**
     * Creates new form nyilvan
     * @throws java.sql.SQLException
     */
    public nyilvan() throws SQLException {
        initComponents();
        Update();
        jLabel3.setText("");
        jLabel4.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        keres = new javax.swing.JTextField();
        ker = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Szakdolgozat");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "beszállitó", "anyagkód", "sorszám", "S/H/V/M", "mennyiség", "érték"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        keres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keresActionPerformed(evt);
            }
        });

        jLabel1.setText("mennyiség");

        jLabel3.setText("jLabel3");

        jLabel4.setText("jLabel4");

        jLabel2.setText("érték");

        jButton1.setIcon(new ImageIcon(getImage("icons/print.png")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(keres)
                                .addComponent(ker, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)))
                        .addGap(19, 19, 19)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(keres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(ker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(82, 82, 82)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keresActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                 MessageFormat header = new MessageFormat(" ");
        MessageFormat footer = new MessageFormat(" ");
    try {
        tabla.print(JTable.PrintMode.FIT_WIDTH, header, footer);
    } catch (java.awt.print.PrinterAbortException e) {
        Logger.getLogger(Termek.class.getName()).log(Level.SEVERE, null, e);
    } catch (PrinterException ex) {
        Logger.getLogger(Termek.class.getName()).log(Level.SEVERE, null, ex);
    }  
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
     private void Update() throws SQLException {
        try{
         Statement stat = con.createStatement();
        //ResultSet rs = stat.executeQuery("Select * from dbo.nyilvan ");
        ResultSet rs = stat.executeQuery("Select * from dbo.nyilvantartás ");
        while(tabla.getRowCount() > 0){
            ((DefaultTableModel) tabla.getModel()).removeRow(0);
        }
        int columns = rs.getMetaData().getColumnCount();
        while(rs.next()){  
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++)
            {  
                row[i - 1] = rs.getObject(i);
            }
            ((DefaultTableModel) tabla.getModel()).insertRow(rs.getRow()-1,row);
        }
        tabla.setAutoCreateRowSorter(true);
        tabla.setDefaultEditor(tabla.getColumnClass(NORMAL), null);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        int alignment = 0;
        centerRenderer.setHorizontalAlignment(alignment);
        tabla.setDefaultRenderer(String.class, centerRenderer);
        for (int columnIndex = 0; columnIndex < tabla.getColumnCount(); columnIndex++){
            if(columnIndex == 10){
                columnIndex++;
            }
            tabla.getColumnModel().getColumn(columnIndex).setCellRenderer(centerRenderer);
        }
        tabla.setPreferredScrollableViewportSize(tabla.getPreferredSize());
        tabla.setFillsViewportHeight(true);

        
    }catch(SQLException e){
         JOptionPane.showMessageDialog(null, "táblázat jelenités\n"+e);
         System.exit(0);
    }
        keres.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateFilters();
            
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                 updateFilters();
                 jLabel3.setText("");
                 jLabel4.setText("");
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 updateFilters();
            }
       });
       
       ker.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                 updateFilters();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                 updateFilters();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 updateFilters();
            }
       });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField ker;
    private javax.swing.JTextField keres;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void updateFilters() {
            TableRowSorter sorter = (TableRowSorter) tabla.getRowSorter();
            RowFilter kere = RowFilter.regexFilter(keres.getText());
            RowFilter ke = RowFilter.regexFilter(ker.getText());
            if (keres.getText().length() > 0) {
                if (ker.getText().length() > 0) {
                    List<RowFilter<DefaultTableModel, Integer>> filters =
                    new ArrayList<RowFilter<DefaultTableModel, Integer>>(2);
                    filters.add(kere);
                    filters.add(ke);
                    RowFilter<DefaultTableModel, Integer> comboFilter = RowFilter.andFilter(filters);
                    sorter.setRowFilter(comboFilter);
                    aktMen(tabla);                
                }else {               
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" +kere));
                    aktMen(tabla);
                }
            }else if (keres.getText().length() > 0) {             
                sorter.setRowFilter(RowFilter.regexFilter("(?i)" +ke));
                aktMen(tabla);
            }else {              
              sorter.setRowFilter(null); 
            }
            }

    private void aktMen(JTable tabla) {
         double value = 0.0;
         double valu = 0.0;
          for (int i = 0; i < tabla.getRowCount(); i++){
                try{
                    String beme = tabla.getValueAt(i , 4).toString();
                    double asd = Double.parseDouble(beme);
                    df2.format(valu += asd);
                    String bemen = tabla.getValueAt(i , 5).toString();
                    double asda = Double.parseDouble(bemen);
                    df2.format(value += asda);
            }    
                catch(NumberFormatException ex){System.err.println("ex badNumberInput:"+ex);}
            }
                jLabel4.setText(df2.format(value));
                jLabel3.setText(df2.format(valu));
    }

   
}
